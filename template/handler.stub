package hanlder

import (
	"net/http"
	"{{AppName}}/{{AppRoot}}/{{SingularLowerName}}/application"
	"{{AppName}}/{{AppRoot}}/{{SingularLowerName}}/domain/entity"
	"{{AppName}}/{{AppRoot}}/core/logger"
	utilQuery "{{AppName}}/{{AppRoot}}/core/pkg/query"
	"{{AppName}}/{{AppRoot}}/core/pkg/utils"
	"{{AppName}}/{{AppRoot}}/core/cache"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

type Handler struct {
	App *application.App
}

// NewHandler creates a new instance of Handler with the given dependencies.
func NewHandler(db *gorm.DB, cacheService cache.CacheService) *Handler {
	return &Handler{
		App: application.AppInterface(db, cacheService),
	}
}

func (h *Handler) Get{{PluralCapitalName}}(w http.ResponseWriter, r *http.Request) {
	// Implement Get{{PluralCapitalName}} handler
	var {{PluralLowerName}} []*entity.Response{{SingularCapitalName}}
	{{PluralLowerName}}, err := h.App.Get{{PluralCapitalName}}(r)
	if err != nil {
		logger.Error("Failed to fetch {{PluralLowerName}}", zap.Error(err))
		utils.WriteJSONError(w, http.StatusInternalServerError, "Failed to fetch {{PluralLowerName}}")
		return
	}
	// Write response
	utils.WriteJSONResponse(w, http.StatusOK, map[string]interface{}{
		"message":    "{{PluralLowerName}} fetched successfully",
		"{{PluralLowerName}}": {{PluralLowerName}},
	})
}

func (h *Handler) Create{{SingularCapitalName}}(w http.ResponseWriter, r *http.Request) {
	// Implement Create{{SingularCapitalName}} handler
	var new{{SingularCapitalName}} entity.{{SingularCapitalName}}

	pareErr := utilQuery.BodyParse(&new{{SingularCapitalName}}, w, r, true) // Parse request body and validate it
	if pareErr != nil {
		return
	}

	// Call the Create{{SingularCapitalName}} function to create the {{SingularCapitalName}}
	_, err := h.App.Create{{SingularCapitalName}}(&new{{SingularCapitalName}})
	if err != nil {
		utils.WriteJSONError(w, http.StatusInternalServerError, "Failed to create {{SingularLowerName}}")
		return
	}

	// Write response
	utils.WriteJSONResponse(w, http.StatusCreated, map[string]interface{}{
		"message": "{{SingularCapitalName}} created successfully",
	})
}

func (h *Handler) Get{{SingularCapitalName}}(w http.ResponseWriter, r *http.Request) {
	// Implement Get{{SingularCapitalName}}ByID handler
	var {{SingularLowerName}} *entity.Response{{SingularCapitalName}}
	{{SingularLowerName}}, err := h.App.Get{{SingularCapitalName}}(r)
	if err != nil {
		utils.WriteJSONError(w, http.StatusInternalServerError, err.Error())
		return
	}
	// Write response
	utils.WriteJSONResponse(w, http.StatusOK, map[string]interface{}{
		"message":    "{{SingularCapitalName}} fetched successfully",
		"{{SingularLowerName}}": {{SingularLowerName}},
	})

}

func (h *Handler) Update{{SingularCapitalName}}(w http.ResponseWriter, r *http.Request) {
	// Implement Update{{SingularCapitalName}} handler
	var update{{SingularCapitalName}} entity.Update{{SingularCapitalName}}
	pareErr := utilQuery.BodyParse(&update{{SingularCapitalName}}, w, r, true) // Parse request body and validate it
	if pareErr != nil {
		return
	}

	// Call the Create{{SingularCapitalName}} function to create the {{SingularLowerName}}
	_, err := h.App.Update{{SingularCapitalName}}(r, &update{{SingularCapitalName}})
	if err != nil {
		utils.WriteJSONError(w, http.StatusInternalServerError, err.Error())
		return
	}

	// Write response
	utils.WriteJSONResponse(w, http.StatusCreated, map[string]interface{}{
		"message": "{{SingularCapitalName}} updated successfully",
	})
}

func (h *Handler) Delete{{SingularCapitalName}}(w http.ResponseWriter, r *http.Request) {
	// Implement Delete{{SingularCapitalName}} handler
	err := h.App.Delete{{SingularCapitalName}}(r)
	if err != nil {
		utils.WriteJSONError(w, http.StatusInternalServerError, err.Error())
		return
	}
	// Write response
	utils.WriteJSONResponse(w, http.StatusOK, map[string]interface{}{
		"message": "{{SingularCapitalName}} deleted successfully",
	})
}
