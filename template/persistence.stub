package persistence

import (
	"fmt"

	"{{AppName}}/{{AppRoot}}/{{SingularLowerName}}/domain/entity"
	"{{AppName}}/{{AppRoot}}/{{SingularLowerName}}/domain/repository"
	"{{AppName}}/{{AppRoot}}/core/database"
	"{{AppName}}/{{AppRoot}}/core/logger"
	utilQuery "{{AppName}}/{{AppRoot}}/core/pkg/query"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

type {{SingularCapitalName}}RepositoryImpl struct {
	// Add fields for database connection or any other dependencies
	db *gorm.DB
}

func New{{SingularCapitalName}}Repository() (repository.{{SingularCapitalName}}Repository, error) {
	conn, err := database.ConnectDB()
	if err != nil {
		logger.Error("Failed to connect to database", zap.Error(err))
		return nil, err
	}
	return &{{SingularCapitalName}}RepositoryImpl{db: conn}, nil
}

// Get{{PluralCapitalName}} returns all {{PluralLowerName}} from the database
func (r *{{SingularCapitalName}}RepositoryImpl) Get{{PluralCapitalName}}(queryValues map[string][]string) ([]*entity.Response{{SingularCapitalName}}, error) {
	// Implement logic to get all {{PluralLowerName}}
	{{PluralLowerName}} := []*entity.Response{{SingularCapitalName}}{}
	query := r.db.Model(&entity.{{SingularCapitalName}}{})

	// Filter by name
	if names, ok := queryValues["name"]; ok && len(names) > 0 {
		query = query.Where("name LIKE ?", "%"+names[0]+"%")
	}

	// Filter by status
	if statuses, ok := queryValues["status"]; ok && len(statuses) > 0 {
		query = query.Where("status IN (?)", statuses)
	}

	// Filter by date
	if dates, ok := queryValues["date"]; ok && len(dates) > 0 {
		query = query.Where("created_at >= ?", dates[0])
	}

	// Filter by date range
	if dateRange, ok := queryValues["date_range"]; ok && len(dateRange) > 0 {
		query = query.Where("created_at BETWEEN ? AND ?", dateRange[0], dateRange[1])
	}
	// orderBy
	order := utilQuery.OrderBy(queryValues)
	query = query.Order(order)
	// Filter
	paginate := utilQuery.Pagination(query, queryValues) // Pagination
	if err := paginate.Find(&{{PluralLowerName}}).Error; err != nil {
		return nil, err
	}
	return {{PluralLowerName}}, nil
}

// Get{{SingularCapitalName}}ByID returns a {{SingularLowerName}} by ID from the database
func (r *{{SingularCapitalName}}RepositoryImpl) Get{{SingularCapitalName}}ByID({{SingularLowerName}}ID uint) (*entity.{{SingularCapitalName}}, error) {
	// Implement logic to get {{SingularLowerName}} by ID
	{{SingularLowerName}} := &entity.{{SingularCapitalName}}{}
	if err := r.db.First(&{{SingularLowerName}}, {{SingularLowerName}}ID).Error; err != nil {
		return nil, fmt.Errorf("{{SingularLowerName}} not found")
	}
	return {{SingularLowerName}}, nil
}
func (r *{{SingularCapitalName}}RepositoryImpl) Get{{SingularCapitalName}}({{SingularLowerName}}ID uint) (*entity.Response{{SingularCapitalName}}, error) {
	// Implement logic to get {{SingularLowerName}} by ID
	{{SingularLowerName}} := &entity.Response{{SingularCapitalName}}{}
	query := r.db.Model(&entity.{{SingularCapitalName}}{}).Where("id = ?", {{SingularLowerName}}ID)
	if err := query.First(&{{SingularLowerName}}).Error; err != nil {
		return nil, fmt.Errorf("{{SingularLowerName}} not found")
	}
	return {{SingularLowerName}}, nil
}

// Create{{SingularCapitalName}} saves a new {{SingularLowerName}} to the database
func (r *{{SingularCapitalName}}RepositoryImpl) Create{{SingularCapitalName}}({{SingularLowerName}} *entity.{{SingularCapitalName}}) (*entity.{{SingularCapitalName}}, error) {
	// Implement logic to save {{SingularLowerName}}
	if err := r.db.Create({{SingularLowerName}}).Error; err != nil {
		return nil, err
	}
	return {{SingularLowerName}}, nil
}

// Update{{SingularCapitalName}} updates a {{SingularLowerName}} in the database
func (r *{{SingularCapitalName}}RepositoryImpl) Update{{SingularCapitalName}}(old{{SingularCapitalName}} *entity.{{SingularCapitalName}}, {{SingularLowerName}} *entity.Update{{SingularCapitalName}}) (*entity.{{SingularCapitalName}}, error) {
	if err := r.db.Model(&old{{SingularCapitalName}}).Updates({{SingularLowerName}}).Error; err != nil {
		return nil, err
	}
	update{{SingularCapitalName}} := &entity.{{SingularCapitalName}}{}

	if err := r.db.First(&update{{SingularCapitalName}}, old{{SingularCapitalName}}.ID).Error; err != nil {
		return nil, err
	}
	return update{{SingularCapitalName}}, nil
}

// Delete{{SingularCapitalName}} deletes a {{SingularLowerName}} from the database

func (r *{{SingularCapitalName}}RepositoryImpl) Delete{{SingularCapitalName}}({{SingularLowerName}} *entity.{{SingularCapitalName}}) error {
	// Implement logic to delete {{SingularLowerName}}
	if err := r.db.Delete({{SingularLowerName}}).Error; err != nil {
		return err
	}
	return nil
}
