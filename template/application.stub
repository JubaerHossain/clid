package application

import (
	"fmt"
	"net/http"
	"strconv"

	"{{AppName}}/{{AppRoot}}/{{SingularLowerName}}/domain/entity"
	"{{AppName}}/{{AppRoot}}/{{SingularLowerName}}/infrastructure/persistence"
)

func Get{{PluralCapitalName}}(r *http.Request) ([]*entity.Response{{SingularCapitalName}}, error) {
	// Call repository to get all {{PluralLowerName}}
	queryValues := r.URL.Query()
	repo, err := persistence.New{{SingularCapitalName}}Repository()
	if err != nil {
		return nil, err
	}
	{{PluralLowerName}}, {{SingularLowerName}}Err := repo.Get{{PluralCapitalName}}(queryValues)
	if {{SingularLowerName}}Err != nil {
		return nil, {{SingularLowerName}}Err
	}
	return {{PluralLowerName}}, nil
}

// Create{{SingularCapitalName}} creates a new {{SingularLowerName}}
func Create{{SingularCapitalName}}({{SingularLowerName}} *entity.{{SingularCapitalName}}) (*entity.{{SingularCapitalName}}, error) {
	// Add any validation or business logic here before creating the {{SingularLowerName}}

	repo, err := persistence.New{{SingularCapitalName}}Repository()
	if err != nil {
		return nil, err
	}

	{{SingularLowerName}}, err2 := repo.Create{{SingularCapitalName}}({{SingularLowerName}})
	if err2 != nil {
		return nil, err2
	}
	return {{SingularLowerName}}, nil
}

// Get{{SingularCapitalName}}ByID retrieves a {{SingularLowerName}} by ID
func Get{{SingularCapitalName}}(r *http.Request) (*entity.Response{{SingularCapitalName}}, error) {
	// Call repository to get {{SingularLowerName}} by ID
	repo, err := persistence.New{{SingularCapitalName}}Repository()
	if err != nil {
		return nil, err
	}
	id, err := strconv.ParseUint(r.PathValue("id"), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid {{SingularLowerName}} ID")
	}
	{{SingularLowerName}}, {{SingularLowerName}}Err := repo.Get{{SingularCapitalName}}(uint(id))
	if {{SingularLowerName}}Err != nil {
		return nil, {{SingularLowerName}}Err
	}
	return {{SingularLowerName}}, nil
}
func Get{{SingularCapitalName}}ByID(r *http.Request) (*entity.{{SingularCapitalName}}, error) {
	// Call repository to get {{SingularLowerName}} by ID
	repo, err := persistence.New{{SingularCapitalName}}Repository()
	if err != nil {
		return nil, err
	}
	id, err := strconv.ParseUint(r.PathValue("id"), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid {{SingularLowerName}} ID")
	}
	{{SingularLowerName}}, {{SingularLowerName}}Err := repo.Get{{SingularCapitalName}}ByID(uint(id))
	if {{SingularLowerName}}Err != nil {
		return nil, {{SingularLowerName}}Err
	}
	return {{SingularLowerName}}, nil
}

// Update{{SingularCapitalName}} updates an existing {{SingularLowerName}}
func Update{{SingularCapitalName}}(r *http.Request, {{SingularLowerName}} *entity.Update{{SingularCapitalName}}) (*entity.{{SingularCapitalName}}, error) {
	// Call repository to update {{SingularLowerName}}

	old, err := Get{{SingularCapitalName}}ByID(r)
	if err != nil {
		return nil, err
	}
	repo, err := persistence.New{{SingularCapitalName}}Repository()
	if err != nil {
		return nil, err
	}

	update{{SingularCapitalName}}, err2 := repo.Update{{SingularCapitalName}}(old, {{SingularLowerName}})
	if err2 != nil {
		return nil, err2
	}
	return update{{SingularCapitalName}}, nil
}

// Delete{{SingularCapitalName}} deletes a {{SingularLowerName}} by ID
func Delete{{SingularCapitalName}}(r *http.Request) error {
	// Call repository to delete {{SingularLowerName}}
	{{SingularLowerName}}, err := Get{{SingularCapitalName}}ByID(r)
	if err != nil {
		return err
	}
	repo, err := persistence.New{{SingularCapitalName}}Repository()
	if err != nil {
		return err
	}

	err2 := repo.Delete{{SingularCapitalName}}({{SingularLowerName}})
	if err2 != nil {
		return err2
	}

	return nil
}